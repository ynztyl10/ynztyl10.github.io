<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>L.Yang</title>
    <description>为了更好的自己</description>
    <link>http://lyang.cc/</link>
    <atom:link href="http://lyang.cc/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 24 Feb 2016 18:32:35 +0800</pubDate>
    <lastBuildDate>Wed, 24 Feb 2016 18:32:35 +0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Email中嵌入HTML</title>
        <description>&lt;h1 id=&quot;emailhtml&quot;&gt;Email中嵌入HTML&lt;/h1&gt;

&lt;p&gt;前段时间做过一个自动发送日报邮件的工具，可以根据选取的项目，统计出当天该项目的bug解决状态，发送日报模板邮件给版本负责人。&lt;/p&gt;

&lt;p&gt;我以为这是个很简单的事情，无非就是设计一个网页，展示图表完全可以用HighCharts生成，用上丰富的CSS3和HTML5特性，可以让我的Email显得那么「&lt;strong&gt;高大上&lt;/strong&gt;」。&lt;/p&gt;

&lt;p&gt;然后，我发现这事不那么容易。抛开后台和编辑工作，单单是设计一个Email样板，就需要不少心思。&lt;/p&gt;

&lt;p&gt;因为这种带格式的邮件，其实就是一张网页，正式名称叫做&lt;a href=&quot;https://en.wikipedia.org/wiki/HTML_email&quot;&gt;HTML Email&lt;/a&gt;。它能否正常显示，完全取决于邮件客户端。大多数的邮件客户端（比如Outlook和Gmail），会过滤HTML设置，让邮件面目全非。&lt;br /&gt;
我发现，编写HTML Email的窍门，就是使用15年前的网页制作方法。&lt;/p&gt;

&lt;h2 id=&quot;doctype&quot;&gt;Doctype&lt;/h2&gt;
&lt;p&gt;我们知道HTML网页通常都会在首行设置Doctype，用于文档规范。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;XHTML 1.0 Transitional&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; 
&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&amp;gt;
&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;HTML5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;No doctype&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目前，Email中兼容性最好的是「&lt;strong&gt;XHTML 1.0 Transitional&lt;/strong&gt;」。事实上，经过网上查阅资料，发现很多邮件客户端（比如Hotmail和Gmail）会删掉你原本的Doctype，换上这个Doctype。&lt;/p&gt;

&lt;p&gt;同时，很多资料中也指出，推荐使用「&lt;strong&gt;XHTML 1.0 Transitional&lt;/strong&gt;」。这意味着，很多HTML5的特性我们都不能用了。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;外部资源&lt;/h2&gt;
&lt;p&gt;我们在开发HTML网页时，一般都会引用外部资源，CSS、JS、Image等等，但是当我们用到Email中时，这些外部资源就没那么「&lt;strong&gt;好用&lt;/strong&gt;」了。&lt;/p&gt;

&lt;h3 id=&quot;css&quot;&gt;CSS&lt;/h3&gt;
&lt;p&gt;CSS还能用，但是就像文章标题一样，完全就是15年前的技术。&lt;/p&gt;

&lt;p&gt;你想使用CSS3特性？「&lt;strong&gt;No Way&lt;/strong&gt;」。&lt;/p&gt;

&lt;p&gt;不过好在还能使用的class属性，但是需要注意的是，不同的邮件客户端，支持的style也不尽相同。具体差异可以参考「&lt;a href=&quot;https://www.campaignmonitor.com/css/&quot;&gt;这里&lt;/a&gt;」。&lt;/p&gt;

&lt;p&gt;因此，为了兼容性，我们最好使用元素的内联style，因为放置在网页头部的样式，很可能会被客户端删除。也就是说我们需要写成这样的形式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body style=&quot;margin: 0; padding: 0;&quot;&amp;gt;
  &amp;lt;table border=&quot;1&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot;&amp;gt;
    &amp;lt;tr&amp;gt; 
      &amp;lt;td&amp;gt; Hello! &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是不是像回到了15年前？不过在实际使用中，我发现大多数邮件客户端是能够兼容简单的&lt;code&gt;class&lt;/code&gt;属性，比如一些&lt;code&gt;width&lt;/code&gt;、&lt;code&gt;height&lt;/code&gt;、&lt;code&gt;font&lt;/code&gt;等等。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;即使是使用class属性来定制元素的style，也无法从外部引用CSS样式文件，只能写在该网页的style标签中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;也有一些小工具可以帮助我们将&lt;code&gt;style&lt;/code&gt;标签中的样式转换为内联（inline style）属性&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/peterbe/premailer&quot;&gt;premailer-python&lt;/a&gt; 转换工具python版&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/premailer/premailer&quot;&gt;premailer-ruby&lt;/a&gt; 转换工具ruby版&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/onassar/PHP-Premailer&quot;&gt;premailer-php&lt;/a&gt; 转换工具PHP版&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;js&quot;&gt;JS&lt;/h3&gt;
&lt;p&gt;众多资料告诉我，最好不要这么做……&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;图片资源&lt;/h3&gt;
&lt;p&gt;图片是唯一可以引用的外部资源。终于可以正常写标签了……&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&quot;http://somehost/src/image/someimage.png&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要注意的是，不少客户端默认不显示图片（比如Gmail），所以要确保即使没有图片，主要内容也能被阅读。&lt;/p&gt;

&lt;h4 id=&quot;email&quot;&gt;Email中插入图片资源&lt;/h4&gt;
&lt;p&gt;如果我们想直接将图片插入到Email中该怎么做呢？&lt;/p&gt;

&lt;p&gt;这也是有办法的，稍微复杂一点。就是直接使用MIMEImage，下面是一个简单的示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Send an HTML email with an embedded image and a plain text message for
# email clients that don&#39;t want to display the HTML.

from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
from email.MIMEImage import MIMEImage

# Define these once; use them twice!
strFrom = &#39;from@example.com&#39;
strTo = &#39;to@example.com&#39;

# Create the root message and fill in the from, to, and subject headers
msgRoot = MIMEMultipart(&#39;related&#39;)
msgRoot[&#39;Subject&#39;] = &#39;test message&#39;
msgRoot[&#39;From&#39;] = strFrom
msgRoot[&#39;To&#39;] = strTo
msgRoot.preamble = &#39;This is a multi-part message in MIME format.&#39;

# Encapsulate the plain and HTML versions of the message body in an
# &#39;alternative&#39; part, so message agents can decide which they want to display.
msgAlternative = MIMEMultipart(&#39;alternative&#39;)
msgRoot.attach(msgAlternative)

msgText = MIMEText(&#39;This is the alternative plain text message.&#39;)
msgAlternative.attach(msgText)

# We reference the image in the IMG SRC attribute by the ID we give it below
msgText = MIMEText(&#39;&amp;lt;b&amp;gt;Some &amp;lt;i&amp;gt;HTML&amp;lt;/i&amp;gt; text&amp;lt;/b&amp;gt; and an image.&amp;lt;br&amp;gt;&amp;lt;img src=&quot;cid:image1&quot;&amp;gt;&amp;lt;br&amp;gt;Nifty!&#39;, &#39;html&#39;)
msgAlternative.attach(msgText)

# This example assumes the image is in the current directory
fp = open(&#39;test.jpg&#39;, &#39;rb&#39;)
msgImage = MIMEImage(fp.read())
fp.close()

# Define the image&#39;s ID as referenced above
msgImage.add_header(&#39;Content-ID&#39;, &#39;&amp;lt;image1&amp;gt;&#39;)
msgRoot.attach(msgImage)

# Send the email (this example assumes SMTP authentication is required)
import smtplib
smtp = smtplib.SMTP()
smtp.connect(&#39;smtp.example.com&#39;)
smtp.login(&#39;exampleuser&#39;, &#39;examplepass&#39;)
smtp.sendmail(strFrom, strTo, msgRoot.as_string())
smtp.quit()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-2&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;再漂亮的HTML网页，发送成邮件之后总是或多或少会有问题，也许是Email这个互联网老前辈步伐迟缓，也许是处于安全考虑（禁止使用JS脚本），总之Email作为互联网元老级产品，仍然会伴随我们很长一段时间。&lt;/p&gt;

&lt;p&gt;近年来看，越来越多的邮件客户端开始支持HTML5，也许将来有一天，我们写Email也会变得跟写HTML一样简单。&lt;/p&gt;

&lt;p&gt;「简单」的背后，往往没那么简单。&lt;/p&gt;

</description>
        <pubDate>Wed, 24 Feb 2016 09:09:00 +0800</pubDate>
        <link>http://lyang.cc/2016/02/24/HTML-Email-2016/</link>
        <guid isPermaLink="true">http://lyang.cc/2016/02/24/HTML-Email-2016/</guid>
        
        <category>Email</category>
        
        <category>HTML</category>
        
        
      </item>
    
      <item>
        <title>简单好用的iTunes API</title>
        <description>&lt;h1 id=&quot;itunes-api&quot;&gt;简单好用的iTunes API&lt;/h1&gt;

&lt;p&gt;最近需要抓取AppStore中应用的用户评论信息，做反馈聚合，找到几个比较有用的iTunes API，能够通过这些API来获取应用的信息（应用的基本信息、AppStore排行榜、应用的评价信息），而且这些API都是公开可用，并不需要爬虫什么的来抓取。&lt;/p&gt;

&lt;h2 id=&quot;itunes-search-apis&quot;&gt;iTunes Search APIs&lt;/h2&gt;
&lt;p&gt;最基本的搜索API，在苹果官网也有详细的&lt;a href=&quot;http://www.apple.com/itunes/affiliates/resources/documentation/itunes-store-web-service-search-api.html&quot;&gt;说明文档&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;lookup-api&quot;&gt;lookup API&lt;/h3&gt;
&lt;p&gt;根据app id获取app的详细信息，比如icon、售价、评论、截图等。&lt;/p&gt;

&lt;p&gt;例如，书旗小说的app id是&lt;strong&gt;733689509&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://itunes.apple.com/lookup?id=733689509
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
&quot;resultCount&quot;: 1,
&quot;results&quot;: [
    {
        &quot;artistViewUrl&quot;: &quot;https://itunes.apple.com/us/developer/guang-zhou-li-ba-ba-wen-xue/id1025705471?uo=4&quot;,
        &quot;artworkUrl60&quot;: &quot;http://is5.mzstatic.com/image/thumb/Purple69/v4/36/71/72/36717229-e8ed-5078-b341-311e18413810/source/60x60bb.jpg&quot;,
        &quot;artworkUrl100&quot;: &quot;http://is5.mzstatic.com/image/thumb/Purple69/v4/36/71/72/36717229-e8ed-5078-b341-311e18413810/source/100x100bb.jpg&quot;,
        &quot;screenshotUrls&quot;: [
            &quot;http://a4.mzstatic.com/us/r30/Purple7/v4/81/c1/68/81c168f9-a9ec-5756-55e1-2645f7e6c57c/screen1136x1136.jpeg&quot;,
            &quot;http://a4.mzstatic.com/us/r30/Purple5/v4/74/4e/5b/744e5b38-deb4-6974-cfd6-e4db0137aa5d/screen1136x1136.jpeg&quot;,
            &quot;http://a4.mzstatic.com/us/r30/Purple7/v4/d2/ee/35/d2ee3599-e42c-b73a-7151-4bb2414a0125/screen1136x1136.jpeg&quot;,
            &quot;http://a5.mzstatic.com/us/r30/Purple69/v4/a3/62/a6/a362a623-6528-66af-1292-dfb2b6f1e6b5/screen1136x1136.jpeg&quot;,
            &quot;http://a5.mzstatic.com/us/r30/Purple7/v4/b7/d2/3e/b7d23efb-53f6-1e43-b695-e7015867ee25/screen1136x1136.jpeg&quot;
        ],
        &quot;ipadScreenshotUrls&quot;: [
            &quot;http://a1.mzstatic.com/us/r30/Purple5/v4/4f/91/7d/4f917d66-63c6-dad8-8444-c1753336892d/screen480x480.jpeg&quot;,
            &quot;http://a3.mzstatic.com/us/r30/Purple7/v4/7e/01/55/7e015576-7d80-bfd3-a782-7022c993240a/screen480x480.jpeg&quot;,
            &quot;http://a3.mzstatic.com/us/r30/Purple5/v4/88/15/32/881532cb-1236-0398-92d2-59d22457941d/screen480x480.jpeg&quot;,
            &quot;http://a4.mzstatic.com/us/r30/Purple7/v4/f8/ff/cf/f8ffcfc1-3153-1c06-d16f-eec10fe23607/screen480x480.jpeg&quot;,
            &quot;http://a3.mzstatic.com/us/r30/Purple7/v4/a2/75/29/a27529b7-4aef-f59d-763e-490285785203/screen480x480.jpeg&quot;
        ],
        &quot;artworkUrl512&quot;: &quot;http://is5.mzstatic.com/image/thumb/Purple69/v4/36/71/72/36717229-e8ed-5078-b341-311e18413810/source/512x512bb.jpg&quot;,
        &quot;kind&quot;: &quot;software&quot;,
        &quot;features&quot;: [
            &quot;iosUniversal&quot;
        ],
        &quot;supportedDevices&quot;: [
            &quot;iPhone4&quot;,
            &quot;iPad2Wifi&quot;,
            &quot;iPad23G&quot;,
            &quot;iPhone4S&quot;,
            &quot;iPadThirdGen&quot;,
            &quot;iPadThirdGen4G&quot;,
            &quot;iPhone5&quot;,
            &quot;iPodTouchFifthGen&quot;,
            &quot;iPadFourthGen&quot;,
            &quot;iPadFourthGen4G&quot;,
            &quot;iPadMini&quot;,
            &quot;iPadMini4G&quot;,
            &quot;iPhone5c&quot;,
            &quot;iPhone5s&quot;,
            &quot;iPhone6&quot;,
            &quot;iPhone6Plus&quot;,
            &quot;iPodTouchSixthGen&quot;
        ],
        &quot;advisories&quot;: [
            &quot;Infrequent/Mild Realistic Violence&quot;,
            &quot;Infrequent/Mild Horror/Fear Themes&quot;,
            &quot;Infrequent/Mild Cartoon or Fantasy Violence&quot;,
            &quot;Infrequent/Mild Alcohol, Tobacco, or Drug Use or References&quot;,
            &quot;Frequent/Intense Sexual Content or Nudity&quot;,
            &quot;Frequent/Intense Mature/Suggestive Themes&quot;,
            &quot;Infrequent/Mild Profanity or Crude Humor&quot;
        ],
        &quot;isGameCenterEnabled&quot;: false,
        &quot;contentAdvisoryRating&quot;: &quot;17+&quot;,
        &quot;languageCodesISO2A&quot;: [
            &quot;ZH&quot;
        ],
        &quot;trackViewUrl&quot;: &quot;https://itunes.apple.com/us/app/shu-qi-xiao-shuo-shu-qi-zheng/id733689509?mt=8&amp;amp;uo=4&quot;,
        &quot;trackCensoredName&quot;: &quot;书旗小说 - 书旗正版最全的小说阅读器&quot;,
        &quot;fileSizeBytes&quot;: &quot;39761830&quot;,
        &quot;trackContentRating&quot;: &quot;17+&quot;,
        &quot;currentVersionReleaseDate&quot;: &quot;2016-02-04T10:05:31Z&quot;,
        &quot;sellerName&quot;: &quot;Guangzhou Alibaba Literature Information Technology Technology Co., Ltd.&quot;,
        &quot;currency&quot;: &quot;USD&quot;,
        &quot;wrapperType&quot;: &quot;software&quot;,
        &quot;version&quot;: &quot;2.4.2&quot;,
        &quot;description&quot;: &quot;必备小说阅读神器！必备电子书阅读神器！\n\n最全的小说！更新最快！新书最多！\n\n功能体验全面升级，大量小说！全网小说任你搜！\n\n更新及时，秒速提醒！新书推荐，懂你所想！\n\n增加出版物，心灵鸡汤成功励志口才演讲职场，等你来读！\n\n\n功能介绍：\n\n1、新增二十多万本热门书籍，让你看都看不完\n2、加强推荐，看完一本还有很多本\n3、加强搜索，搜书名搜作者搜标签\n4、还是搜索，还能智能纠正错别字\n5、优化细节体验，解决已知的bug\n\n我们的QQ用户群是“210651368”，热切盼望您的加入哈！后续有活动也会第一时间通知群里的书友们的，让我们一起把书旗做的更好！&quot;,
        &quot;artistId&quot;: 1025705471,
        &quot;artistName&quot;: &quot;广州阿里巴巴文学信息技术有限公司&quot;,
        &quot;genres&quot;: [
            &quot;Books&quot;,
            &quot;Entertainment&quot;
        ],
        &quot;price&quot;: 0,
        &quot;releaseDate&quot;: &quot;2014-01-30T21:54:29Z&quot;,
        &quot;primaryGenreName&quot;: &quot;Book&quot;,
        &quot;primaryGenreId&quot;: 6018,
        &quot;trackId&quot;: 733689509,
        &quot;trackName&quot;: &quot;书旗小说 - 书旗正版最全的小说阅读器&quot;,
        &quot;bundleId&quot;: &quot;com.shuqicenter.reader&quot;,
        &quot;minimumOsVersion&quot;: &quot;7.0&quot;,
        &quot;genreIds&quot;: [
            &quot;6018&quot;,
            &quot;6016&quot;
        ],
        &quot;formattedPrice&quot;: &quot;Free&quot;,
        &quot;isVppDeviceBasedLicensingEnabled&quot;: true,
        &quot;releaseNotes&quot;: &quot;1、优化充值流程\n2、更快的检查更新，让你最快的看到大神更新\n3、开放大量限免书籍\n4、优化大量体验问题&quot;,
        &quot;averageUserRating&quot;: 4.5,
        &quot;userRatingCount&quot;: 12
    }
] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另外，还可以指定国家和区域，只需要在url中加上&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2&quot;&gt;国家和区域代码&lt;/a&gt;&lt;br /&gt;
例如，仅搜索中国地区：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://itunes.apple.com/cn/lookup?id=733689509
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同时支持批量获取：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    https://itunes.apple.com/cn/lookup?id=733689509,733689510
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;search-api&quot;&gt;search API&lt;/h3&gt;
&lt;p&gt;就跟我们在AppStore应用中搜索应用一样，输入query，得到结果。&lt;br /&gt;
例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://itunes.apple.com/search?term=书旗小说&amp;amp;country=cn&amp;amp;media=software
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同时还有很多参数可选：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;country：区分不同国家和区域的AppStore
media：按类型过滤，比如software
entity：返回按类型过滤，比如movie
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其他参数和例子，可参考&lt;a href=&quot;http://www.apple.com/itunes/affiliates/resources/documentation/itunes-store-web-service-search-api.html&quot;&gt;官方API文档&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;itunes-rss-feeds&quot;&gt;iTunes RSS Feeds&lt;/h2&gt;
&lt;p&gt;RSS订阅，用于获取排行榜单，支持iPhone、iPad，任意分类下（游戏、效率等等）。&lt;/p&gt;

&lt;p&gt;具体参数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;genre：分类id
limit：需要返回的topN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如，获取&lt;strong&gt;游戏&lt;/strong&gt;分类下，top10的iPad应用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://itunes.apple.com/rss/toppaidapplications/limit=10/genre=6014/json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样支持不同国家与区域：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://itunes.apple.com/cn/rss/toppaidapplications/limit=10/genre=6014/json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以通过&lt;a href=&quot;https://rss.itunes.apple.com/cn/?urlDesc=&quot;&gt; iTunes Store RSS Generator&lt;/a&gt;自行生成RSS订阅&lt;/p&gt;

&lt;h2 id=&quot;app-reviews&quot;&gt;App Reviews&lt;/h2&gt;
&lt;p&gt;根据app id获取应用的评价信息API。&lt;br /&gt;
例如，获取书旗小说的用户评价：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://itunes.apple.com/rss/customerreviews/id=733689509/json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样支持不同国家和区域：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://itunes.apple.com/cn/rss/customerreviews/id=733689509/json
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Sat, 06 Feb 2016 08:50:00 +0800</pubDate>
        <link>http://lyang.cc/2016/02/06/Useful-iTunes-APIS-2016/</link>
        <guid isPermaLink="true">http://lyang.cc/2016/02/06/Useful-iTunes-APIS-2016/</guid>
        
        <category>iTunes</category>
        
        <category>AppStore</category>
        
        
      </item>
    
      <item>
        <title>Welcome to Lyang Blog</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Yeah It’s on. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;#build&quot;&gt;跳过废话，直接看技术实现 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2016 年，总算有个地方可以好好写点东西了。&lt;/p&gt;

&lt;p&gt;作为一个程序员， Blog 这种轮子要是挂在大众博客程序上就太没意思了。一是觉得大部分 Blog 服务都太丑，二是觉得不能随便定制不好玩。之前因为太懒没有折腾，结果就一直连个写 Blog 的地儿都没有。&lt;/p&gt;

&lt;p&gt;简单的事，动手搭建一个吧。&lt;/p&gt;

&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;接下来说说搭建这个博客的技术细节。&lt;/p&gt;

&lt;p&gt;正好之前就有关注过 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; + &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; 快速 Building Blog 的技术方案，非常轻松时尚。&lt;/p&gt;

&lt;p&gt;其优点非常明显：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; 带来的优雅写作体验&lt;/li&gt;
  &lt;li&gt;非常熟悉的 Git workflow ，&lt;strong&gt;Git Commit 即 Blog Post&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机
    &lt;ul&gt;
      &lt;li&gt;如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Jekyll 的自定制非常容易，基本就是个模版引擎&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最大的缺点可能是 GitHub 在国内访问起来太慢。&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jan 2016 08:50:00 +0800</pubDate>
        <link>http://lyang.cc/2016/01/20/hello-2016/</link>
        <guid isPermaLink="true">http://lyang.cc/2016/01/20/hello-2016/</guid>
        
        <category>生活</category>
        
        
      </item>
    
  </channel>
</rss>
